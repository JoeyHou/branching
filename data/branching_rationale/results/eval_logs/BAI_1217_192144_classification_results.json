{
    "avg_acc": 0.79,
    "all_acc": 0.77,
    "conf_ma": {
        "false_unknown": 0,
        "false_retrieve": 0,
        "false_predict": 95,
        "correct_igonre": 0,
        "correct_predict": 313
    },
    "model_config": {
        "config": {
            "model_name": "code_classification_naive",
            "task": "classification",
            "script_template": {
                "script_template": "class Procedure:\n\t# Given two options to perform an action, choose the most appropriate one based on some rationale.\n\t\n\tdef __init__(self):\n\t\tself.goal = {goal}\n\t\tself.current_step = {branching_step}\n\t\tself.option1 = {op1}\n\t\tself.option2 = {op2}\n\t\tself.related_rationale = [{related_rationale}]\n\tdef choose_best_option(self, rationale):\n\t\t'''\n\t\tDescription: return the most appropriate option given the rationale.\n\t\tinput: \n\t\t\t- rationale (str)\n\t\toutput: \n\t\t\t- the better option (from option1 and option2), return None if the difference does not matter\n\t\t'''\n\t\tif rationale not in self.related_rationale:\n\t\t\t# If a rationale is out of the scope of consideration, ignore it\n\t\t\treturn None"
            },
            "prompt_type": "naive",
            "gpt_config": {
                "model": "code-davinci-002",
                "temperature": 0,
                "return_logprobs": false,
                "wait_time": 10,
                "api_key": "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",
                "max_tokens": 1200
            }
        },
        "task": "classification",
        "model_name": "code_classification_naive",
        "cache_dir": "../data/branching_rationale/openai_cache/output/",
        "naive": true,
        "prompting": true,
        "ensemble": false,
        "gpt_config": {
            "model": "code-davinci-002",
            "temperature": 0,
            "return_logprobs": false,
            "wait_time": 10,
            "api_key": "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",
            "max_tokens": 1200
        },
        "gpt_model": "code-davinci-002",
        "api_key": "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",
        "rationale2key": {
            "[cost] effort / manpower": 0,
            "[cost] money / materials": 1,
            "[cost] time": 2,
            "[outcome] emotional / physical rewards": 3,
            "[outcome] facilitating subsequent events": 4,
            "[outcome] more options / variety": 5,
            "[outcome] personalized results": 6,
            "[outcome] reliability / certainty / chance of success": 7,
            "[prerequisite] materialized (devices, equipments)": 8,
            "[prerequisite] non-materialized (skills, knowledge, time)": 9,
            "[prerequisite] outside support (people, environment)": 10,
            "not covered": -1
        },
        "key2rationale": {
            "0": "[cost] effort / manpower",
            "1": "[cost] money / materials",
            "2": "[cost] time",
            "3": "[outcome] emotional / physical rewards",
            "4": "[outcome] facilitating subsequent events",
            "5": "[outcome] more options / variety",
            "6": "[outcome] personalized results",
            "7": "[outcome] reliability / certainty / chance of success",
            "8": "[prerequisite] materialized (devices, equipments)",
            "9": "[prerequisite] non-materialized (skills, knowledge, time)",
            "10": "[prerequisite] outside support (people, environment)",
            "-1": "not covered"
        },
        "script_template": {
            "script_template": "class Procedure:\n\t# Given two options to perform an action, choose the most appropriate one based on some rationale.\n\t\n\tdef __init__(self):\n\t\tself.goal = {goal}\n\t\tself.current_step = {branching_step}\n\t\tself.option1 = {op1}\n\t\tself.option2 = {op2}\n\t\tself.related_rationale = [{related_rationale}]\n\tdef choose_best_option(self, rationale):\n\t\t'''\n\t\tDescription: return the most appropriate option given the rationale.\n\t\tinput: \n\t\t\t- rationale (str)\n\t\toutput: \n\t\t\t- the better option (from option1 and option2), return None if the difference does not matter\n\t\t'''\n\t\tif rationale not in self.related_rationale:\n\t\t\t# If a rationale is out of the scope of consideration, ignore it\n\t\t\treturn None"
        },
        "few_shot_prompts": [
            "# TEST CASE\nclass Procedure:\n\t# Given two options to perform an action, choose the most appropriate one based on some rationale.\t\n\tdef __init__(self):\n\t\tself.goal = 'go out for a picnic'\n\t\tself.previous_steps = ['1. decided to go out for a picnic', '2. take a shower', '3. get ready for the day', '4. get in the car', '5. drive to the park', '6. park the car', ]\n\t\tself.current_step = 'park the car'\n\t\tself.option1 = 'park along the street'\n\t\tself.option2 = 'try to park inside the park'\n\t\tself.related_rationale = [\n\t\t\t'[cost] money / materials', # save money\n\t\t\t'[outcome] more options / variety', # more options in future steps\n\t\t\t'[outcome] reliability / certainty / chance of success' # higher chance of success\n\t\t] # we only consider these rationales in our decision process\n\tdef choose_best_option(self, rationale):\n\t\t'''\n\t\tDescription: return the most appropriate option given the rationale.\n\t\tinput: \n\t\t\t- rationale (str)\n\t\toutput: \n\t\t\t- the better option (from option1 and option2), return None if the difference does not matter\n\t\t'''\n\t\tif rationale not in self.related_rationale:\n\t\t\t# If a rationale is out of the scope of consideration, ignore it\n\t\t\treturn None\n\t\tif rationale == '[cost] money / materials':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option1\n\t\tif rationale == '[outcome] more options / variety':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option1\n\t\tif rationale == '[outcome] reliability / certainty / chance of success':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option2\n###\n\n",
            "# TEST CASE\nclass Procedure:\n\t# Given two options to perform an action, choose the most appropriate one based on some rationale.\n\tdef __init__(self):\n\t\tself.goal = 'start practicing with friends'\n\t\tself.previous_steps = ['1. learn how to play football', '2. contact friends to set up a time', ]\n\t\tself.current_step = 'contact friends to set up a time'\n\t\tself.option1 = 'make a public post about playing football in facebook group'\n\t\tself.option2 = 'call friends one at a time to see their available time'\n\t\tself.related_rationale = [\n\t\t\t'[cost] effort / manpower', # require less human effort\n\t\t\t'[cost] time', # save time\n\t\t\t'[outcome] reliability / certainty / chance of success' # higher chance of success\n\t\t] # we only consider these rationales in our decision process\n\tdef choose_best_option(self, rationale):\n\t\t'''\n\t\tDescription: return the most appropriate option given the rationale.\n\t\tinput: \n\t\t\t- rationale (str)\n\t\toutput: \n\t\t\t- the better option (from option1 and option2), return None if the difference does not matter\n\t\t'''\n\t\tif rationale not in self.related_rationale:\n\t\t\t# If a rationale is out of the scope of consideration, ignore it\n\t\t\treturn None\n\t\tif rationale == '[cost] effort / manpower':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option1\n\t\tif rationale == '[cost] time':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option1\n\t\tif rationale == '[outcome] reliability / certainty / chance of success':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option2\n\n\t\t\n###\n\n",
            "# TEST CASE\nclass Procedure:\n\t# Given two options to perform an action, choose the most appropriate one based on some rationale.\t\n\tdef __init__(self):\n\t\tself.goal = 'air out the musty basement'\n\t\tself.previous_steps = ['1. decided to air out the musty basement', '2. put breathing mask on', ]\n\t\tself.current_step = 'put breathing mask on'\n\t\tself.option1 = 'put on a reusable mask'\n\t\tself.option2 = 'put on an n-95 single-use mask'\n\t\tself.related_rationale = [\n\t\t\t'[cost] money / materials', # save money\n\t\t\t'[outcome] emotional / physical rewards', # provide extra rewards to people\n\t\t\t'[outcome] reliability / certainty / chance of success' # higher chance of success\n\t\t] # we only consider these rationales in our decision process\n\tdef choose_best_option(self, rationale):\n\t\t'''\n\t\tDescription: return the most appropriate option given the rationale.\n\t\tinput: \n\t\t\t- rationale (str)\n\t\toutput: \n\t\t\t- the better option (from option1 and option2), return None if the difference does not matter\n\t\t'''\n\t\tif rationale not in self.related_rationale:\n\t\t\t# If a rationale is out of the scope of consideration, ignore it\n\t\t\treturn None\n\t\tif rationale == '[cost] money / materials':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option1\n\t\tif rationale == '[outcome] emotional / physical rewards':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option1\n\t\tif rationale == '[outcome] reliability / certainty / chance of success':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option2\n###\n\n",
            "# TEST CASE\nclass Procedure:\n\t# Given two options to perform an action, choose the most appropriate one based on some rationale.\n\tdef __init__(self):\n\t\tself.goal = 'place the skeleton on the counter'\n\t\tself.previous_steps = ['1. take the skeleton to the cashier', '2. get close to counter', '3. lift skeleton up', ]\n\t\tself.current_step = 'lift skeleton up'\n\t\tself.option1 = \"life the skeleton on one's own\"\n\t\tself.option2 = 'ask the cashier for help'\n\t\tself.related_rationale = [\n\t\t\t'[cost] effort / manpower', # require less human effort\n\t\t\t'[outcome] reliability / certainty / chance of success' # higher chance of success\n\t\t] # we only consider these rationales in our decision process\n\tdef choose_best_option(self, rationale):\n\t\t'''\n\t\tDescription: return the most appropriate option given the rationale.\n\t\tinput: \n\t\t\t- rationale (str)\n\t\toutput: \n\t\t\t- the better option (from option1 and option2), return None if the difference does not matter\n\t\t'''\n\t\tif rationale not in self.related_rationale:\n\t\t\t# If a rationale is out of the scope of consideration, ignore it\n\t\t\treturn None\n\t\tif rationale == '[cost] effort / manpower':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option2\n\t\tif rationale == '[outcome] reliability / certainty / chance of success':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option2\n###\n\n",
            "# TEST CASE\n\nclass Procedure:\n\t# Given two options to perform an action, choose the most appropriate one based on some rationale.\n\t\n\tdef __init__(self):\n\t\tself.goal = 'buy milk from the store'\n\t\tself.previous_steps = ['1. decided to buy milk from the store', '2. decide which store to go to', ]\n\t\tself.current_step = 'decide which store to go to'\n\t\tself.option1 = 'go to the closest store'\n\t\tself.option2 = 'go to the store with the most options'\n\t\tself.related_rationale = [\n\t\t\t'[cost] effort / manpower', # require less human effort\n\t\t\t'[cost] time', # save time\n\t\t\t'[outcome] reliability / certainty / chance of success', # higher chance of success\n\t\t\t'[outcome] more options / variety' # more options in future steps\n\t\t] # we only consider these rationales in our decision process\n\tdef choose_best_option(self, rationale):\n\t\t'''\n\t\tDescription: return the most appropriate option given the rationale.\n\t\tinput: \n\t\t\t- rationale (str)\n\t\toutput: \n\t\t\t- the better option (from option1 and option2), return None if the difference does not matter\n\t\t'''\n\t\tif rationale not in self.related_rationale:\n\t\t\t# If a rationale is out of the scope of consideration, ignore it\n\t\t\treturn None\n\t\tif rationale == '[cost] effort / manpower':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option1\n\t\tif rationale == '[cost] time':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option1\n\t\tif rationale == '[outcome] more options / variety':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option2\n\t\tif rationale == '[outcome] reliability / certainty / chance of success':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option2\n###\n\n",
            "# TEST CASE\nclass Procedure:\n\t# Given two options to perform an action, choose the most appropriate one based on some rationale.\t\n\tdef __init__(self):\n\t\tself.goal = 'go back in time'\n\t\tself.previous_steps = ['1. decided to go back in time', '2. go to school for quantum mechanics', ]\n\t\tself.current_step = 'go to school for quantum mechanics'\n\t\tself.option1 = 'go to a class at a university'\n\t\tself.option2 = 'go to a class at a community college'\n\t\tself.related_rationale = [\n\t\t\t'[cost] effort / manpower', # require less human effort\n\t\t\t'[cost] money / materials', # save money\n\t\t\t'[cost] time', # save time\n\t\t\t'[outcome] emotional / physical rewards', # provide extra rewards to people\n\t\t\t'[outcome] reliability / certainty / chance of success' # higher chance of success\n\t\t] # we only consider these rationales in our decision process\n\tdef choose_best_option(self, rationale):\n\t\t'''\n\t\tDescription: return the most appropriate option given the rationale.\n\t\tinput: \n\t\t\t- rationale (str)\n\t\toutput: \n\t\t\t- the better option (from option1 and option2), return None if the difference does not matter\n\t\t'''\n\t\tif rationale not in self.related_rationale:\n\t\t\t# If a rationale is out of the scope of consideration, ignore it\n\t\t\treturn None\n\t\tif rationale == '[cost] effort / manpower':\n\t\t\t# \n\t\t\t#\n\t\t\treturn self.option2\n\t\tif rationale == '[cost] money / materials':\n\t\t\t#\n\t\t\t#\n\t\t\treturn self.option2\n\t\tif rationale == '[cost] time': \n\t\t\t#\n\t\t\t#\n\t\t\treturn self.option2\n\t\tif rationale == '[outcome] emotional / physical rewards':\n\t\t\t#\n\t\t\t#\n\t\t\treturn self.option1\n\t\tif rationale == '[outcome] reliability / certainty / chance of success':\n\t\t\t#\n\t\t\t#\n\t\t\treturn self.option1\n###\n\n"
        ]
    }
}
